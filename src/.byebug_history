exit
new_rover.position
new_rover_position
c
new_rover
c
exit
other_rover
rover
exit
other_rover
rover
rover.position
exit
c
rover.position
c
rover.position
c
rover.position
c
rover.position
c
rover.position
c
rover.position
c
rover.position
c
rover.position
c
rover.position
c
rover.position
n
other_rover.position
rover.position
n
other_rover
n
other_rover
rover
exit
error[:timestamp]
error.timestamp
error
c
exit
'HELLO' unless a.empty?
a = [1,0]
a.empty?
a?
a = []
rover.errors <<  {time: Time.now, msg: "ohh no"}
rover.errors << Time.now = {msg: "ohh no"}
rover.errors["#{Time.now}"] = 'DD'
rover.errors[#{Time.now}] = 'DD'
rover.errors[Time.now] = 'DD'
rover.errors
exit
rover.errors["#{Time.now}"] = 'now'
rover.errors["#{Time.now}] = 'now'
rover.errors
rover
exit
@upper_right_co_ordinate
@upper_right_co_ordinates
@upper_right_co_odinates
current_rover_position
new_position_requested
axis
exit
c
exit
n
new_rover_intake_status
n
@upper_right_co_ordinate
n
index
line.strip
c
exit
line
index
n
c
n
exit
rover.heading
n
rover.heading
n
 /(L|R)/.match(instruction)
n
/M/.match(instruction)
instruction
exit
rover.control_instructions.each_char{ |c| puts c }
rover.control_instructions
exit
rover
n
rover.control_instructions
n
rover
exit
rover
exit
current_position
current_heading
c
exit
rover.control_instructions.each_char{ |c| puts c }
rover.control_instructions
rover
n
exit
rover
c
rover
@rover
rover.heading = "HACKED"
rover.position
exit
rover.position = "HACKED"
rover.position
rover
exit
split[INDEX_OF_HEADING_ON_LINE][0]
split[INDEX_OF_HEADING_ON_LINE]
split
exit
initial_rover_heading
